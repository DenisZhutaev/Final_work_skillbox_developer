import geonamescache
from aiohttp import ClientSession
from datetime import datetime, timedelta


from config import OPENWEATHERMAP_API_KEY


async def request_weather_data(endpoint, **params):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ API OpenWeatherMap –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param endpoint:  –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API OpenWeatherMap, str.
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, dict.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º, dict.
    """
    params.update({'appid': OPENWEATHERMAP_API_KEY,
                   'units': 'metric', 'lang': 'ru'})
    url = f"http://api.openweathermap.org/data/2.5/{endpoint}"

    async with ClientSession() as session:
        async with session.get(url, params=params) as response:
            data = await response.json()
            if data.get('cod') != 200 and data.get('cod') != "200":
                return None
            return data


async def get_weather(city: str = None, lat: float = None, lon: float = None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, str.
        :param lat: –®–∏—Ä–æ—Ç–∞, float.
        :param lon: –î–æ–ª–≥–æ—Ç–∞, float.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, dict.
    """
    params = {}
    if city:
        params['q'] = city
    elif lat is not None and lon is not None:
        params['lat'] = lat
        params['lon'] = lon
    else:
        return None

    return await request_weather_data("weather", **params)


async def get_forecast(city: str, days: int = 1):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, str.
        :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1), int.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã, dict.
    """
    params = {'q': city}
    return await request_weather_data("forecast", **params)


def get_weather_icon(weather_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–≥–æ–¥—ã.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param weather_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–≥–æ–¥—ã, int.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: –°–∏–º–≤–æ–ª –ø–æ–≥–æ–¥—ã, str.
    """
    if 200 <= weather_id <= 232:
        return "‚õàÔ∏è"  # –ì—Ä–æ–∑–∞
    elif 300 <= weather_id <= 531:
        return "üåßÔ∏è"  # –î–æ–∂–¥—å
    elif 600 <= weather_id <= 622:
        return "‚ùÑÔ∏è"  # –°–Ω–µ–≥
    elif 800 == weather_id:
        return "‚òÄÔ∏è"  # –Ø—Å–Ω–æ
    else:
        return "‚òÅÔ∏è"  # –û–±–ª–∞—á–Ω–æ


def format_weather(data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ —Å—Ç—Ä–æ–∫—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param data:  –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: –°—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ, str.
    """
    city = data['name']
    temp = round(data['main']['temp'])  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ —Ü–µ–ª—ã—Ö
    feels_like = round(data['main']['feels_like'])
    description = data['weather'][0]['description']
    weather_id = data['weather'][0]['id']

    sunrise = datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
    sunset = datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')
    day_duration = timedelta(seconds=data['sys']['sunset'] -
                                     data['sys']['sunrise'])
    day_duration_str = (f"{day_duration.seconds // 3600} —á "
                        f"{day_duration.seconds % 3600 // 60} –º–∏–Ω")

    weather_icon = get_weather_icon(weather_id)

    weather_str = (f"{city}:\n{weather_icon} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                   f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}"
                   f"¬∞C\n{description.capitalize()}\n"
                   f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset}\n"
                   f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {day_duration_str}\n"
                   f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üôÇ")

    return weather_str


def format_forecast(data, days=1):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã –≤ —Å—Ç—Ä–æ–∫—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param data: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã.
        :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1), int.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: –°—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã, str.
    """
    city = data['city']['name']
    weather_list = data['list']
    country = data['city']['country']
    country = get_country_name(country)

    if days == 1:
        period = "—Å–µ–≥–æ–¥–Ω—è"
    elif days == 2:
        period = "–∑–∞–≤—Ç—Ä–∞"
    else:
        period = f"—Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π"

    forecast_str = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city}, {country} –Ω–∞ {period}:\n"

    city_sunrise = datetime.fromtimestamp(
        data['city']['sunrise']).strftime('%H:%M')
    city_sunset = datetime.fromtimestamp(
        data['city']['sunset']).strftime('%H:%M')
    city_day_duration = timedelta(
        seconds=data['city']['sunset'] - data['city']['sunrise'])
    city_day_duration_str = f"{city_day_duration.seconds // 3600} —á " \
                            f"{city_day_duration.seconds % 3600 // 60} –º–∏–Ω"

    for i, weather_data in enumerate(weather_list[::8][:days]):
        date = weather_data['dt_txt'][:10]
        temp = round(weather_data['main']['temp'])
        description = weather_data['weather'][0]['description']
        weather_id = weather_data['weather'][0]['id']

        weather_icon = get_weather_icon(weather_id)

        forecast_str += (f"{date}: {weather_icon} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, "
                         f"{description.capitalize()}"
                         f"\n–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {city_sunrise}\n"
                         f"–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {city_sunset}\n"
                         f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {city_day_duration_str}\n"
                         f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üôÇ\n\n")

    return forecast_str


def get_country_name(country_code):
    gc = geonamescache.GeonamesCache()
    countries = gc.get_countries()

    if country_code in countries:
        country_name = countries[country_code]['name']
        return country_name

    return None
