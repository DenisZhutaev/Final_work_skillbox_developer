import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from datetime import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import API_TOKEN
from keyboards import forecast_buttons
from API import get_weather, get_forecast, format_forecast

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = {}


def add_to_history(user_id, city):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, int.
        :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, str.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if user_id not in user_history:
        user_history[user_id] = []
    user_history[user_id].append((city, timestamp))


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    user_name = message.from_user.username or message.from_user.first_name
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç.\
        \n\n–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –∏ –ø–æ –í–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\
        \n\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"

    location_button = KeyboardButton(
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    help_button = KeyboardButton("–ü–æ–º–æ—â—å")

    reply_markup = ReplyKeyboardMarkup(
        resize_keyboard=True).add(location_button).add(help_button)
    await message.reply(welcome_text, reply_markup=reply_markup)


async def send_help_message(chat_id):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, int.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    help_text = (
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ, "
        "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
        "'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ "
        "–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è', –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"
        "–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, "
        "–∑–∞–≤—Ç—Ä–∞ –∏ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥.\n\n"
        "–í—ã —Ç–∞–∫–∂–µ —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
    )

    location_button = KeyboardButton(
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    help_button = KeyboardButton("–ü–æ–º–æ—â—å")

    reply_markup = ReplyKeyboardMarkup(
        resize_keyboard=True).add(location_button, help_button)
    await bot.send_message(chat_id, help_text, reply_markup=reply_markup)


@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def help_message_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–º–æ—â—å".

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    await send_help_message(message.chat.id)


@dp.message_handler(content_types=types.ContentType.LOCATION)
async def process_location(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    location = message.location
    weather_data = await get_weather(
        lat=location.latitude, lon=location.longitude)

    if not weather_data:
        await message.reply(
            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    city = weather_data['name']
    add_to_history(message.from_user.id, city)
    keyboard = forecast_buttons(city)
    await bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "help")
async def process_help(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å".

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param callback_query: –û–±—ä–µ–∫—Ç –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞.

     –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    await bot.answer_callback_query(callback_query.id)
    await send_help_message(callback_query.message.chat.id)


@dp.message_handler()
async def process_city(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    city = message.text
    weather_data = await get_weather(city)

    if not weather_data:
        await message.reply(
            f"üö´ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ "
            "–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    add_to_history(message.from_user.id, city)
    keyboard = forecast_buttons(city)
    await bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "history")
async def process_history(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è".

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param callback_query: –û–±—ä–µ–∫—Ç –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    user_id = callback_query.from_user.id
    if user_id not in user_history or not user_history[user_id]:
        history_text = "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    else:
        history_text = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        for city, timestamp in user_history[user_id]:
            history_text += f"{timestamp}: {city}\n"

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, history_text)


@dp.callback_query_handler(lambda c: c.data.startswith((
        'today:', 'tomorrow:', 'week:')))
async def process_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è, –ó–∞–≤—Ç—Ä–∞, –ù–µ–¥–µ–ª—è".

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        :param callback_query: –û–±—ä–µ–∫—Ç –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        :return: None
    """
    command, city = callback_query.data.split(':', 1)

    if command == 'today':
        days = 1
    elif command == 'tomorrow':
        days = 2
    else:
        days = 7

    forecast_data = await get_forecast(city, days)
    if not forecast_data:
        await bot.answer_callback_query(
            callback_query.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. "
                               "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    forecast_str = format_forecast(forecast_data, days)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, forecast_str)
